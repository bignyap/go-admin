// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: api_usage_summary.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createApiUsageSummaries = `-- name: CreateApiUsageSummaries :copyfrom
INSERT INTO api_usage_summary (
    usage_start_date, usage_end_date, total_calls,
    total_cost, subscription_id, api_endpoint_id, 
    organization_id
) 
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateApiUsageSummariesParams struct {
	UsageStartDate int32
	UsageEndDate   int32
	TotalCalls     int32
	TotalCost      float64
	SubscriptionID int32
	ApiEndpointID  int32
	OrganizationID int32
}

const createApiUsageSummary = `-- name: CreateApiUsageSummary :execresult
INSERT INTO api_usage_summary (
    usage_start_date, usage_end_date, total_calls,
    total_cost, subscription_id, api_endpoint_id, 
    organization_id
) 
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateApiUsageSummaryParams struct {
	UsageStartDate int32
	UsageEndDate   int32
	TotalCalls     int32
	TotalCost      float64
	SubscriptionID int32
	ApiEndpointID  int32
	OrganizationID int32
}

func (q *Queries) CreateApiUsageSummary(ctx context.Context, arg CreateApiUsageSummaryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createApiUsageSummary,
		arg.UsageStartDate,
		arg.UsageEndDate,
		arg.TotalCalls,
		arg.TotalCost,
		arg.SubscriptionID,
		arg.ApiEndpointID,
		arg.OrganizationID,
	)
}

const getApiUsageSummaryByEndpointId = `-- name: GetApiUsageSummaryByEndpointId :many
SELECT usage_summary_id, usage_start_date, usage_end_date, total_calls, total_cost, subscription_id, api_endpoint_id, organization_id FROM api_usage_summary
WHERE api_endpoint_id = ?
`

func (q *Queries) GetApiUsageSummaryByEndpointId(ctx context.Context, apiEndpointID int32) ([]ApiUsageSummary, error) {
	rows, err := q.db.QueryContext(ctx, getApiUsageSummaryByEndpointId, apiEndpointID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiUsageSummary{}
	for rows.Next() {
		var i ApiUsageSummary
		if err := rows.Scan(
			&i.UsageSummaryID,
			&i.UsageStartDate,
			&i.UsageEndDate,
			&i.TotalCalls,
			&i.TotalCost,
			&i.SubscriptionID,
			&i.ApiEndpointID,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApiUsageSummaryByOrgId = `-- name: GetApiUsageSummaryByOrgId :many
SELECT usage_summary_id, usage_start_date, usage_end_date, total_calls, total_cost, subscription_id, api_endpoint_id, organization_id FROM api_usage_summary
WHERE subscription_id IN (
    SELECT subscription_id FROM subscription s
    WHERE s.organization_id = ?
)
`

func (q *Queries) GetApiUsageSummaryByOrgId(ctx context.Context, organizationID int32) ([]ApiUsageSummary, error) {
	rows, err := q.db.QueryContext(ctx, getApiUsageSummaryByOrgId, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiUsageSummary{}
	for rows.Next() {
		var i ApiUsageSummary
		if err := rows.Scan(
			&i.UsageSummaryID,
			&i.UsageStartDate,
			&i.UsageEndDate,
			&i.TotalCalls,
			&i.TotalCost,
			&i.SubscriptionID,
			&i.ApiEndpointID,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApiUsageSummaryBySubId = `-- name: GetApiUsageSummaryBySubId :many
SELECT usage_summary_id, usage_start_date, usage_end_date, total_calls, total_cost, subscription_id, api_endpoint_id, organization_id FROM api_usage_summary
WHERE subscription_id = ?
`

func (q *Queries) GetApiUsageSummaryBySubId(ctx context.Context, subscriptionID int32) ([]ApiUsageSummary, error) {
	rows, err := q.db.QueryContext(ctx, getApiUsageSummaryBySubId, subscriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiUsageSummary{}
	for rows.Next() {
		var i ApiUsageSummary
		if err := rows.Scan(
			&i.UsageSummaryID,
			&i.UsageStartDate,
			&i.UsageEndDate,
			&i.TotalCalls,
			&i.TotalCost,
			&i.SubscriptionID,
			&i.ApiEndpointID,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
