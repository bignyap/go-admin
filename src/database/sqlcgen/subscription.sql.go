// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subscription.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createSubscription = `-- name: CreateSubscription :execresult
INSERT INTO subscription (
    subscription_name, subscription_type, subscription_created_date,
    subscription_updated_date, subscription_start_date, subscription_api_limit, 
    subscription_expiry_date, subscription_description, subscription_status, 
    organization_id, subscription_tier_id
) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateSubscriptionParams struct {
	SubscriptionName        string
	SubscriptionType        string
	SubscriptionCreatedDate int32
	SubscriptionUpdatedDate int32
	SubscriptionStartDate   int32
	SubscriptionApiLimit    sql.NullInt32
	SubscriptionExpiryDate  sql.NullInt32
	SubscriptionDescription sql.NullString
	SubscriptionStatus      sql.NullBool
	OrganizationID          int32
	SubscriptionTierID      int32
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSubscription,
		arg.SubscriptionName,
		arg.SubscriptionType,
		arg.SubscriptionCreatedDate,
		arg.SubscriptionUpdatedDate,
		arg.SubscriptionStartDate,
		arg.SubscriptionApiLimit,
		arg.SubscriptionExpiryDate,
		arg.SubscriptionDescription,
		arg.SubscriptionStatus,
		arg.OrganizationID,
		arg.SubscriptionTierID,
	)
}

const createSubscriptions = `-- name: CreateSubscriptions :copyfrom
INSERT INTO subscription (
    subscription_name, subscription_type, subscription_created_date,
    subscription_updated_date, subscription_start_date, subscription_api_limit, 
    subscription_expiry_date, subscription_description, subscription_status, 
    organization_id, subscription_tier_id
) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateSubscriptionsParams struct {
	SubscriptionName        string
	SubscriptionType        string
	SubscriptionCreatedDate int32
	SubscriptionUpdatedDate int32
	SubscriptionStartDate   int32
	SubscriptionApiLimit    sql.NullInt32
	SubscriptionExpiryDate  sql.NullInt32
	SubscriptionDescription sql.NullString
	SubscriptionStatus      sql.NullBool
	OrganizationID          int32
	SubscriptionTierID      int32
}

const deleteSubscriptionById = `-- name: DeleteSubscriptionById :exec
DELETE FROM subscription
WHERE subscription_id = ?
`

func (q *Queries) DeleteSubscriptionById(ctx context.Context, subscriptionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionById, subscriptionID)
	return err
}

const deleteSubscriptionByOrgId = `-- name: DeleteSubscriptionByOrgId :exec
DELETE FROM subscription
WHERE organization_id = ?
`

func (q *Queries) DeleteSubscriptionByOrgId(ctx context.Context, organizationID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionByOrgId, organizationID)
	return err
}

const getSubscriptionById = `-- name: GetSubscriptionById :one
SELECT subscription_id, subscription_name, subscription_type, subscription_created_date, subscription_updated_date, subscription_start_date, subscription_api_limit, subscription_expiry_date, subscription_description, subscription_status, organization_id, subscription_tier_id FROM subscription
WHERE subscription_id = ?
`

func (q *Queries) GetSubscriptionById(ctx context.Context, subscriptionID int32) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionById, subscriptionID)
	var i Subscription
	err := row.Scan(
		&i.SubscriptionID,
		&i.SubscriptionName,
		&i.SubscriptionType,
		&i.SubscriptionCreatedDate,
		&i.SubscriptionUpdatedDate,
		&i.SubscriptionStartDate,
		&i.SubscriptionApiLimit,
		&i.SubscriptionExpiryDate,
		&i.SubscriptionDescription,
		&i.SubscriptionStatus,
		&i.OrganizationID,
		&i.SubscriptionTierID,
	)
	return i, err
}

const getSubscriptionByOrgId = `-- name: GetSubscriptionByOrgId :many
SELECT subscription_id, subscription_name, subscription_type, subscription_created_date, subscription_updated_date, subscription_start_date, subscription_api_limit, subscription_expiry_date, subscription_description, subscription_status, organization_id, subscription_tier_id FROM subscription
WHERE organization_id = ?
LIMIT ? OFFSET ?
`

type GetSubscriptionByOrgIdParams struct {
	OrganizationID int32
	Limit          int32
	Offset         int32
}

func (q *Queries) GetSubscriptionByOrgId(ctx context.Context, arg GetSubscriptionByOrgIdParams) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionByOrgId, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.SubscriptionID,
			&i.SubscriptionName,
			&i.SubscriptionType,
			&i.SubscriptionCreatedDate,
			&i.SubscriptionUpdatedDate,
			&i.SubscriptionStartDate,
			&i.SubscriptionApiLimit,
			&i.SubscriptionExpiryDate,
			&i.SubscriptionDescription,
			&i.SubscriptionStatus,
			&i.OrganizationID,
			&i.SubscriptionTierID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscription = `-- name: ListSubscription :many
SELECT subscription_id, subscription_name, subscription_type, subscription_created_date, subscription_updated_date, subscription_start_date, subscription_api_limit, subscription_expiry_date, subscription_description, subscription_status, organization_id, subscription_tier_id FROM subscription
ORDER BY subscription_name
LIMIT ? OFFSET ?
`

type ListSubscriptionParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSubscription(ctx context.Context, arg ListSubscriptionParams) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscription, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.SubscriptionID,
			&i.SubscriptionName,
			&i.SubscriptionType,
			&i.SubscriptionCreatedDate,
			&i.SubscriptionUpdatedDate,
			&i.SubscriptionStartDate,
			&i.SubscriptionApiLimit,
			&i.SubscriptionExpiryDate,
			&i.SubscriptionDescription,
			&i.SubscriptionStatus,
			&i.OrganizationID,
			&i.SubscriptionTierID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :execresult
UPDATE subscription
SET 
    subscription_name = ?,
    subscription_start_date = ?,
    subscription_api_limit = ?,
    subscription_expiry_date = ?,
    subscription_description = ?,
    subscription_status = ?,
    organization_id = ?,
    subscription_tier_id = ?
WHERE subscription_id = ?
`

type UpdateSubscriptionParams struct {
	SubscriptionName        string
	SubscriptionStartDate   int32
	SubscriptionApiLimit    sql.NullInt32
	SubscriptionExpiryDate  sql.NullInt32
	SubscriptionDescription sql.NullString
	SubscriptionStatus      sql.NullBool
	OrganizationID          int32
	SubscriptionTierID      int32
	SubscriptionID          int32
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateSubscription,
		arg.SubscriptionName,
		arg.SubscriptionStartDate,
		arg.SubscriptionApiLimit,
		arg.SubscriptionExpiryDate,
		arg.SubscriptionDescription,
		arg.SubscriptionStatus,
		arg.OrganizationID,
		arg.SubscriptionTierID,
		arg.SubscriptionID,
	)
}
