// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tier_pricing.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createTierPricing = `-- name: CreateTierPricing :execresult
INSERT INTO tier_base_pricing (subscription_tier_id, api_endpoint_id, base_cost_per_call, base_rate_limit) 
VALUES (?, ?, ?, ?)
`

type CreateTierPricingParams struct {
	SubscriptionTierID int32
	ApiEndpointID      int32
	BaseCostPerCall    float64
	BaseRateLimit      sql.NullInt32
}

func (q *Queries) CreateTierPricing(ctx context.Context, arg CreateTierPricingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTierPricing,
		arg.SubscriptionTierID,
		arg.ApiEndpointID,
		arg.BaseCostPerCall,
		arg.BaseRateLimit,
	)
}

const createTierPricings = `-- name: CreateTierPricings :copyfrom
INSERT INTO tier_base_pricing (subscription_tier_id, api_endpoint_id, base_cost_per_call, base_rate_limit) 
VALUES (?, ?, ?, ?)
`

type CreateTierPricingsParams struct {
	SubscriptionTierID int32
	ApiEndpointID      int32
	BaseCostPerCall    float64
	BaseRateLimit      sql.NullInt32
}

const deleteTierPricingById = `-- name: DeleteTierPricingById :exec
DELETE FROM tier_base_pricing
WHERE tier_base_pricing_id = ?
`

func (q *Queries) DeleteTierPricingById(ctx context.Context, tierBasePricingID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTierPricingById, tierBasePricingID)
	return err
}

const deleteTierPricingByTierId = `-- name: DeleteTierPricingByTierId :exec
DELETE FROM tier_base_pricing
WHERE subscription_tier_id = ?
`

func (q *Queries) DeleteTierPricingByTierId(ctx context.Context, subscriptionTierID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTierPricingByTierId, subscriptionTierID)
	return err
}

const getTierPricingByTierId = `-- name: GetTierPricingByTierId :many
SELECT 
    tier_base_pricing.tier_base_pricing_id, tier_base_pricing.base_cost_per_call, tier_base_pricing.base_rate_limit, tier_base_pricing.api_endpoint_id, tier_base_pricing.subscription_tier_id, api_endpoint.endpoint_name,
    COUNT(tier_base_pricing_id) OVER() AS total_items
FROM tier_base_pricing
INNER JOIN api_endpoint ON tier_base_pricing.api_endpoint_id = api_endpoint.api_endpoint_id
WHERE subscription_tier_id = ?
LIMIT ? OFFSET ?
`

type GetTierPricingByTierIdParams struct {
	SubscriptionTierID int32
	Limit              int32
	Offset             int32
}

type GetTierPricingByTierIdRow struct {
	TierBasePricingID  int32
	BaseCostPerCall    float64
	BaseRateLimit      sql.NullInt32
	ApiEndpointID      int32
	SubscriptionTierID int32
	EndpointName       string
	TotalItems         interface{}
}

func (q *Queries) GetTierPricingByTierId(ctx context.Context, arg GetTierPricingByTierIdParams) ([]GetTierPricingByTierIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTierPricingByTierId, arg.SubscriptionTierID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTierPricingByTierIdRow{}
	for rows.Next() {
		var i GetTierPricingByTierIdRow
		if err := rows.Scan(
			&i.TierBasePricingID,
			&i.BaseCostPerCall,
			&i.BaseRateLimit,
			&i.ApiEndpointID,
			&i.SubscriptionTierID,
			&i.EndpointName,
			&i.TotalItems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTierPricingById = `-- name: UpdateTierPricingById :execresult
UPDATE tier_base_pricing
SET 
    base_cost_per_call = ?,
    base_rate_limit = ?,
    api_endpoint_id = ?
WHERE tier_base_pricing_id = ?
`

type UpdateTierPricingByIdParams struct {
	BaseCostPerCall   float64
	BaseRateLimit     sql.NullInt32
	ApiEndpointID     int32
	TierBasePricingID int32
}

func (q *Queries) UpdateTierPricingById(ctx context.Context, arg UpdateTierPricingByIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTierPricingById,
		arg.BaseCostPerCall,
		arg.BaseRateLimit,
		arg.ApiEndpointID,
		arg.TierBasePricingID,
	)
}

const updateTierPricingByTierId = `-- name: UpdateTierPricingByTierId :execresult
UPDATE tier_base_pricing
SET 
    base_cost_per_call = ?,
    base_rate_limit = ?,
    api_endpoint_id = ?
WHERE subscription_tier_id = ?
`

type UpdateTierPricingByTierIdParams struct {
	BaseCostPerCall    float64
	BaseRateLimit      sql.NullInt32
	ApiEndpointID      int32
	SubscriptionTierID int32
}

func (q *Queries) UpdateTierPricingByTierId(ctx context.Context, arg UpdateTierPricingByTierIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTierPricingByTierId,
		arg.BaseCostPerCall,
		arg.BaseRateLimit,
		arg.ApiEndpointID,
		arg.SubscriptionTierID,
	)
}
