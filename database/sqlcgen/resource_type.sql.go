// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: resource_type.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createResourceType = `-- name: CreateResourceType :execresult
INSERT INTO resource_type (resource_type_name, resource_type_code, resource_type_description) 
VALUES (?, ?, ?)
`

type CreateResourceTypeParams struct {
	ResourceTypeName        string
	ResourceTypeCode        string
	ResourceTypeDescription sql.NullString
}

func (q *Queries) CreateResourceType(ctx context.Context, arg CreateResourceTypeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createResourceType, arg.ResourceTypeName, arg.ResourceTypeCode, arg.ResourceTypeDescription)
}

const createResourceTypes = `-- name: CreateResourceTypes :copyfrom
INSERT INTO resource_type (resource_type_name, resource_type_code, resource_type_description) 
VALUES (?, ?, ?)
`

type CreateResourceTypesParams struct {
	ResourceTypeName        string
	ResourceTypeCode        string
	ResourceTypeDescription sql.NullString
}

const deleteResourceTypeById = `-- name: DeleteResourceTypeById :exec
DELETE FROM resource_type
WHERE resource_type_id = ?
`

func (q *Queries) DeleteResourceTypeById(ctx context.Context, resourceTypeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteResourceTypeById, resourceTypeID)
	return err
}

const listResourceType = `-- name: ListResourceType :many
SELECT resource_type_id, resource_type_code, resource_type_name, resource_type_description FROM resource_type
ORDER BY resource_type_name
LIMIT ? OFFSET ?
`

type ListResourceTypeParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListResourceType(ctx context.Context, arg ListResourceTypeParams) ([]ResourceType, error) {
	rows, err := q.db.QueryContext(ctx, listResourceType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResourceType{}
	for rows.Next() {
		var i ResourceType
		if err := rows.Scan(
			&i.ResourceTypeID,
			&i.ResourceTypeCode,
			&i.ResourceTypeName,
			&i.ResourceTypeDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
