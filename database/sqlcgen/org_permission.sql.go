// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: org_permission.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createOrgPermission = `-- name: CreateOrgPermission :execresult
INSERT INTO organization_permission (resource_type_id, permission_code, organization_id) 
VALUES (?, ?, ?)
`

type CreateOrgPermissionParams struct {
	ResourceTypeID int32
	PermissionCode string
	OrganizationID int32
}

func (q *Queries) CreateOrgPermission(ctx context.Context, arg CreateOrgPermissionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrgPermission, arg.ResourceTypeID, arg.PermissionCode, arg.OrganizationID)
}

const deleteOrgPermissionById = `-- name: DeleteOrgPermissionById :exec
DELETE FROM organization_permission
WHERE organization_permission_id = ?
`

func (q *Queries) DeleteOrgPermissionById(ctx context.Context, organizationPermissionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrgPermissionById, organizationPermissionID)
	return err
}

const deleteOrgPermissionByOrgId = `-- name: DeleteOrgPermissionByOrgId :exec
DELETE FROM organization_permission
WHERE organization_id = ?
`

func (q *Queries) DeleteOrgPermissionByOrgId(ctx context.Context, organizationID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrgPermissionByOrgId, organizationID)
	return err
}

const getOrgPermission = `-- name: GetOrgPermission :many
SELECT organization_permission_id, resource_type_id, permission_code, organization_id FROM organization_permission
WHERE organization_id = ?
`

func (q *Queries) GetOrgPermission(ctx context.Context, organizationID int32) ([]OrganizationPermission, error) {
	rows, err := q.db.QueryContext(ctx, getOrgPermission, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationPermission
	for rows.Next() {
		var i OrganizationPermission
		if err := rows.Scan(
			&i.OrganizationPermissionID,
			&i.ResourceTypeID,
			&i.PermissionCode,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
